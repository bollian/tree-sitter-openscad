================================================================================
Basic Operations
================================================================================
num = 1 + 2;
s = "Hello, World!";
result = call();
math = 8 % 3 * 5 % 7 / 2 % 1;
number_index = [1, 2, 3, 4][3];
named_index = [1, 2, 3, 4].x;
--------------------------------------------------------------------------------

(source_file
      (assignment
        (identifier)
        (binary_expression
          (number
            (decimal))
          (number
            (decimal))))
      (assignment
        (identifier)
        (string))
      (assignment
        (identifier)
        (function_call
          (identifier)
          (arguments)))
      (assignment
        (identifier)
        (binary_expression
          (binary_expression
            (binary_expression
              (binary_expression
                (binary_expression
                  (number
                    (decimal))
                  (number
                    (decimal)))
                (number
                  (decimal)))
              (number
                (decimal)))
            (number
              (decimal)))
          (number
            (decimal))))
      (assignment
        (identifier)
        (index_expression
          (list
            (number
              (decimal))
            (number
              (decimal))
            (number
              (decimal))
            (number
              (decimal)))
          (number
            (decimal))))
      (assignment
        (identifier)
        (dot_index_expression
          (list
            (number
              (decimal))
            (number
              (decimal))
            (number
              (decimal))
            (number
              (decimal)))
          (identifier))))

================================================================================
Logical Precedence
================================================================================
function side_effect(x) =
    echo(str("side effect ", x));
function truthy_effect(x) =
    side_effect(x) == undef;

bool = true;
int1 = 4;
int2 = 5;
echo(int1 + int2 && bool);
echo(bool && int1 + int2);
echo(side_effect(1) && side_effect(2) || side_effect(3));
echo(truthy_effect(1) || side_effect(2) && side_effect(3));
echo(4 > 5 || true);
echo(true && 4 == 4);
--------------------------------------------------------------------------------

(source_file
      (function_declaration
        (identifier)
        (parameters_declaration
          (parameter
            (identifier)))
        (function_call
          (identifier)
          (arguments
            (function_call
              (identifier)
              (arguments
                (string)
                (identifier))))))
      (function_declaration
        (identifier)
        (parameters_declaration
          (parameter
            (identifier)))
        (binary_expression
          (function_call
            (identifier)
            (arguments
              (identifier)))
          (undef)))
      (assignment
        (identifier)
        (boolean))
      (assignment
        (identifier)
        (number
          (decimal)))
      (assignment
        (identifier)
        (number
          (decimal)))
      (transform_chain
        (module_call
          (identifier)
          (arguments
            (binary_expression
              (binary_expression
                (identifier)
                (identifier))
              (identifier)))))
      (transform_chain
        (module_call
          (identifier)
          (arguments
            (binary_expression
              (identifier)
              (binary_expression
                (identifier)
                (identifier))))))
      (transform_chain
        (module_call
          (identifier)
          (arguments
            (binary_expression
              (binary_expression
                (function_call
                  (identifier)
                  (arguments
                    (number
                      (decimal))))
                (function_call
                  (identifier)
                  (arguments
                    (number
                      (decimal)))))
              (function_call
                (identifier)
                (arguments
                  (number
                    (decimal))))))))
      (transform_chain
        (module_call
          (identifier)
          (arguments
            (binary_expression
              (function_call
                (identifier)
                (arguments
                  (number
                    (decimal))))
              (binary_expression
                (function_call
                  (identifier)
                  (arguments
                    (number
                      (decimal))))
                (function_call
                  (identifier)
                  (arguments
                    (number
                      (decimal)))))))))
      (transform_chain
        (module_call
          (identifier)
          (arguments
            (binary_expression
              (binary_expression
                (number
                  (decimal))
                (number
                  (decimal)))
              (boolean)))))
      (transform_chain
        (module_call
          (identifier)
          (arguments
            (binary_expression
              (boolean)
              (binary_expression
                (number
                  (decimal))
                (number
                  (decimal))))))))

================================================================================
Mathematical Precedence
================================================================================
num = 5 + 4 * 3 ^ 2;
--------------------------------------------------------------------------------

(source_file
      (assignment
        (identifier)
        (binary_expression
          (number
            (decimal))
          (binary_expression
            (number
              (decimal))
            (binary_expression
              (number
                (decimal))
              (number
                (decimal)))))))

================================================================================
Function Precedence
================================================================================
identity = function(x) x;
lazy = function(y) identity(y);
eager = (function(z) identity)(4);
adder = function(x, y) x + y;
multiplier = function(x, y) x * y;
indexer = function(v) v[0];
--------------------------------------------------------------------------------

(source_file
      (assignment
        (identifier)
        (function
          (parameters_declaration
            (parameter
              (identifier)))
          (identifier)))
      (assignment
        (identifier)
        (function
          (parameters_declaration
            (parameter
              (identifier)))
          (function_call
            (identifier)
            (arguments
              (identifier)))))
      (assignment
        (identifier)
        (function_call
          (parenthesized_expression
            (function
              (parameters_declaration
                (parameter
                  (identifier)))
              (identifier)))
          (arguments
            (number
              (decimal)))))
      (assignment
        (identifier)
        (function
          (parameters_declaration
            (parameter
              (identifier))
            (parameter
              (identifier)))
          (binary_expression
            (identifier)
            (identifier))))
      (assignment
        (identifier)
        (function
          (parameters_declaration
            (parameter
              (identifier))
            (parameter
              (identifier)))
          (binary_expression
            (identifier)
            (identifier))))
      (assignment
        (identifier)
        (function
          (parameters_declaration
            (parameter
              (identifier)))
          (index_expression
            (identifier)
            (number
              (decimal))))))

================================================================================
Functions and Ternaries
================================================================================
fn = function(x) x;
echo(fn ? "truthy" : "falsey");
echo(function(y) y ? "first" : "second");
--------------------------------------------------------------------------------

(source_file
      (assignment
        (identifier)
        (function
          (parameters_declaration
            (parameter
              (identifier)))
          (identifier)))
      (transform_chain
        (module_call
          (identifier)
          (arguments
            (ternary_expression
              (identifier)
              (string)
              (string)))))
      (transform_chain
        (module_call
          (identifier)
          (arguments
            (function
              (parameters_declaration
                (parameter
                  (identifier)))
              (ternary_expression
                (identifier)
                (string)
                (string)))))))

================================================================================
Assertions
================================================================================
x = assert(true, false, "extra1", "extra2") 5;
fn = function(x) assert(x) x;
echo(assert(true) assert(false) true);
--------------------------------------------------------------------------------

(source_file
      (assignment
        (identifier)
        (assert_expression
          (boolean)
          (boolean)
          (string)
          (string)
          (number
            (decimal))))
      (assignment
        (identifier)
        (function
          (parameters_declaration
            (parameter
              (identifier)))
          (assert_expression
            (identifier)
            (identifier))))
      (transform_chain
        (module_call
          (identifier)
          (arguments
            (assert_expression
              (boolean)
              (assert_expression
                (boolean)
                (boolean)))))))
