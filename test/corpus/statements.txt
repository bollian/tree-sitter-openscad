================================================================================
Transformations
================================================================================
cylinder();
rotate([90, 0, 0]) cylinder();
translate([1, 0, 0]) {
    difference() {
        rotate([0, 90, 0]) cylinder();
        cube();
    }
}
--------------------------------------------------------------------------------

(source_file
      (transform_chain
        (module_call
          (identifier)
          (arguments)))
      (transform_chain
        (module_call
          (identifier)
          (arguments
            (list
              (number
                (decimal))
              (number
                (decimal))
              (number
                (decimal)))))
        (transform_chain
          (module_call
            (identifier)
            (arguments))))
      (transform_chain
        (module_call
          (identifier)
          (arguments
            (list
              (number
                (decimal))
              (number
                (decimal))
              (number
                (decimal)))))
        (union_block
          (transform_chain
            (module_call
              (identifier)
              (arguments))
            (union_block
              (transform_chain
                (module_call
                  (identifier)
                  (arguments
                    (list
                      (number
                        (decimal))
                      (number
                        (decimal))
                      (number
                        (decimal)))))
                (transform_chain
                  (module_call
                    (identifier)
                    (arguments))))
              (transform_chain
                (module_call
                  (identifier)
                  (arguments))))))))

================================================================================
Control Flow
================================================================================
if ($preview)
    if (false)
        sphere();
    else
        translate([2, 0, 0]) cube();

for (i = [1:2:7]) {
    let (x = i ^ 2, y = x - 1) {
        translate([x, y, 0]) sphere(r = i);
    }
}

intersection_for (i = [1, 2, 3]) {
    if (i > 1) {
        translate([0, i, 0]) cube();
    }
}
--------------------------------------------------------------------------------

(source_file
      (if_block
        (parenthesized_expression
          (special_variable
		    (identifier)))
        (if_block
          (parenthesized_expression
            (boolean))
          (transform_chain
            (module_call
              (identifier)
              (arguments)))
          (transform_chain
            (module_call
              (identifier)
              (arguments
                (list
                  (number
                    (decimal))
                  (number
                    (decimal))
                  (number
                    (decimal)))))
            (transform_chain
              (module_call
                (identifier)
                (arguments))))))
      (for_block
        (parenthesized_assignments
          (assignment
            (identifier)
            (range
              (number
                (decimal))
              (number
                (decimal))
              (number
                (decimal)))))
        (union_block
          (let_block
            (parenthesized_assignments
              (assignment
                (identifier)
                (binary_expression
                  (identifier)
                  (number
                    (decimal))))
              (assignment
                (identifier)
                (binary_expression
                  (identifier)
                  (number
                    (decimal)))))
            (union_block
              (transform_chain
                (module_call
                  (identifier)
                  (arguments
                    (list
                      (identifier)
                      (identifier)
                      (number
                        (decimal)))))
                (transform_chain
                  (module_call
                    (identifier)
                    (arguments
                      (assignment
                        (identifier)
                        (identifier))))))))))
      (intersection_for_block
        (parenthesized_assignments
          (assignment
            (identifier)
            (list
              (number
                (decimal))
              (number
                (decimal))
              (number
                (decimal)))))
        (union_block
          (if_block
            (parenthesized_expression
              (binary_expression
                (identifier)
                (number
                  (decimal))))
            (union_block
              (transform_chain
                (module_call
                  (identifier)
                  (arguments
                    (list
                      (number
                        (decimal))
                      (identifier)
                      (number
                        (decimal)))))
                (transform_chain
                  (module_call
                    (identifier)
                    (arguments)))))))))

================================================================================
Modifiers
================================================================================
! cylinder();
* linear_extrude(4) text("Hello");
rotate([0, 90, 0]) # cylinder();
% cube();
--------------------------------------------------------------------------------


(source_file
      (modifier_chain
        (modifier)
        (transform_chain
          (module_call
            (identifier)
            (arguments))))
      (modifier_chain
        (modifier)
        (transform_chain
          (module_call
            (identifier)
            (arguments
              (number
                (decimal))))
          (transform_chain
            (module_call
              (identifier)
              (arguments
                (string))))))
      (transform_chain
        (module_call
          (identifier)
          (arguments
            (list
              (number
                (decimal))
              (number
                (decimal))
              (number
                (decimal)))))
        (modifier_chain
          (modifier)
          (transform_chain
            (module_call
              (identifier)
              (arguments)))))
      (modifier_chain
        (modifier)
        (transform_chain
          (module_call
            (identifier)
            (arguments)))))
================================================================================
Assertions
================================================================================
x = 10;
assert(x < 20) cube();
for (y = [3:5])
    assert(assert() y < x, "message")
        cylinder();
--------------------------------------------------------------------------------

(source_file
      (assignment
        (identifier)
        (number
          (decimal)))
      (assert_statement
        (binary_expression
          (identifier)
          (number
            (decimal)))
        (transform_chain
          (module_call
            (identifier)
            (arguments))))
      (for_block
        (parenthesized_assignments
          (assignment
            (identifier)
            (range
              (number
                (decimal))
              (number
                (decimal)))))
        (assert_statement
          (assert_expression
            (binary_expression
              (identifier)
              (identifier)))
          (string)
          (transform_chain
            (module_call
              (identifier)
              (arguments))))))
